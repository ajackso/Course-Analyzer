# Andrea Jackson and Kate Kenneally
# CS 249, Spring 2016
# Course Analyzer Final Project
# course_info.py

sortcounts = [('110', [21, 15, 15, 3, 3, 2, 1, 0]),
    ('111', [38, 65, 55, 25, 14, 5, 0, 0]),
    ('112', [0, 0, 0, 5, 0, 0, 0, 2]),
    ('114', [3, 0, 2, 0, 1, 0, 0, 0]),
    ('117', [4, 0, 3, 0, 2, 0, 0, 0]),
    ('118', [0, 4, 0, 0, 0, 0, 0, 0]),
    ('215', [0, 0, 4, 2, 18, 1, 9, 0]),
    ('220', [0, 2, 0, 28, 0, 16, 0, 17]),
    ('230', [6, 41, 80, 49, 29, 18, 6, 0]),
    ('231', [0, 0, 4, 38, 21, 65, 19, 20]),
    ('232', [0, 0, 4, 0, 15, 0, 14, 0]),
    ('235', [0, 0, 8, 7, 29, 9, 66, 22]),
    ('240', [1, 0, 35, 11, 63, 19, 41, 8]),
    ('242', [0, 0, 2, 13, 10, 8, 8, 7]),
    ('249', [0, 2, 0, 21, 0, 9, 0, 11]),
    ('251', [0, 1, 1, 34, 6, 50, 14, 40]),
    ('301', [0, 0, 0, 1, 0, 6, 0, 8]),
    ('304', [0, 0, 0, 11, 10, 48, 15, 43]),
    ('307', [0, 0, 4, 2, 22, 3, 26, 3]),
    ('310', [0, 0, 0, 0, 0, 6, 0, 5]),
    ('313', [0, 0, 0, 0, 6, 0, 15, 0]),
    ('315', [0, 0, 2, 9, 1, 16, 0, 12]),
    ('320', [0, 0, 10, 0, 15, 0, 37, 0]),
    ('322', [0, 0, 0, 0, 1, 0, 6, 0]),
    ('332', [0, 0, 0, 0, 12, 0, 5, 0]),
    ('342', [0, 0, 1, 0, 20, 7, 21, 10]),
    ('349', [0, 0, 0, 18, 0, 18, 0, 34])]

descdict = {'CS110': {'color': '#ff14bd', 'title': 'Computer Science and the Internet', 'text': 'This course explains the basics of how the Internet works and how to build a website. Topics include client-server architecture; structuring Web pages with HTML, CSS, and JavaScript; the representation of colors, images, and sound on the computer; encryption; cookies; and CGI forms. We also discuss accessibility, copyright, intellectual property, and critical thinking in the context of the Internet. The required project models most phases of the standard software lifecycle. Students are introduced to programming by building an interactive website using JavaScript. Students are required to attend an additional 70-minute discussion section each week.'},
    'CS111': {'color': '#ff1482', 'title': 'Computer Programming and Problem Solving', 'text': 'An introduction to problem solving through computer programming. Students learn how to read, modify, design, debug, and test algorithms that solve problems. Programming concepts include control structures, data structures, abstraction, recursion, modularity, and object-oriented design. Students explore these concepts in the context of interactive programs involving graphics and user interfaces using the Python programming language. Students are required to attend an additional two-hour laboratory section each week. Required for students who wish to major or minor in computer science or elect more advanced courses in the field.'},
    'CS112': {'color': '#ff144e', 'title': 'Computation for the Sciences', 'text': 'An introduction to computer programming that provides the tools necessary for students to use computers effectively in scientific work, including physical sciences, biological sciences, medicine, mathematics, psychology, and economics. Students learn to write software to solve problems, visualize and analyze data, perform computer simulations, and implement and test computational models that arise in a wide range of scientific disciplines. The course introduces MATLAB, an extensive and widely used technical computing environment with advanced graphics, visualization, and analysis tools, and a rich high-level programming language. Students are required to attend an additional two-hour laboratory section each week.'},
    'CS114': {'color': '#ff1417', 'title': 'The Socio-Technological Web', 'text': 'As more and more people use the technologies and services made available from computer science, online environments like Facebook, Second Life, MySpace, Wikipedia, blogs, and open source development communitie have been flourishing. It is becoming clear that problems existing in our real world transfer and become amplified in the virtual world created by our interconnectivity. This course will start by studying the structure of the traditional Web and its recent successor, the Social Web, and will focus on issues of virtual identity, personal and group privacy, trust evaluation and propagation, online security, critical thinking, online propaganda, googlearchy, fraud and manipulation, restricted resources, class differences, self-perception, and decision-making. Students are required to attend an additional 70-minute discussion section each week.'},
    'CS117': {'color': '#ff3d14', 'title': 'Inventing Mobile Apps', 'text': 'This course teaches how to create apps for mobile devices as a vehicle for learning big ideas of computer science, engineering, and entrepreneurship, and explore technology\'s impact on society. Applications include games, quizzes, electronic voting, location-aware apps, social networking, and apps that communicate with Web services. All apps will be created on Android phones using App Inventor, a visual programming environment that does not require previous programming experience. The course culminates in a project where students design and implement new mobile apps for clients. Students are required to attend an additional 70-minute laboratory section each week.'},
    'CS118': {'color': '#ff6c14', 'title': 'First Year Seminar: Creating Computing', 'text': 'We are all consumers of technology, but it is more empowering to be designers and inventors. This seminar explores the computer as a creative medium for designing and building applications that students find useful and personally meaningful. Using the Python programming language, students will learn to create from scratch simple computer programs that involve graphics, user interfaces, data analysis and visualization, communication with web services, generation of webpages, and sharing with others via databases in the cloud. Fundamental computational thinking concepts and programming techniques will be introduced through hands-on activities in class and used in assignments and student-designed projects.'},
    'CS215': {'color': '#ff9114', 'title': 'Multimedia Design and Programming', 'text': 'The purpose of this course is to give students a broad foundation in issues related to creating multimedia and hypermedia applications. Topics to be covered include history and philosophy of hypermedia; principles of human-computer interaction; multimedia programming; optimizing for CD-ROMs and the World Wide Web; digital representation and editing of media (audio, graphics, video); media compression and transmission; and delivery of multimedia applications.'},
    'CS220': {'color': '#ffae14', 'title': 'Human-Computer Interaction', 'text': 'Human-Computer Interaction is one of the areas that have transformed the way we use computers in the last 30 years. Topics include methodology for designing and testing user interfaces, interaction styles (command line, menus, graphical user interfaces, virtual reality, tangible user interfaces), interaction techniques (including use of voice, gesture, eye movements), design guidelines, and user interface software tools. Students will design a user interface, program a prototype, and test the results for usability.'},
    'CS230': {'color': '#fab100', 'title': 'Data Structures', 'text': 'An introduction to techniques and building blocks for organizing large programs. Topics include: modules, abstract data types, recursion, algorithmic efficiency, and the use and implementation of standard data structures and algorithms, such as lists, trees, graphs, stacks, queues, priority queues, tables, sorting, and searching. Students become familiar with these concepts through weekly programming assignments using the Java programming language. Students are required to attend an additional two-hour laboratory section each week.'},
    'CS231': {'color': '#ffc814', 'title': 'Fundamental Algorithms', 'text': 'An introduction to the design and analysis of fundamental algorithms. General techniques covered: divide-and-conquer algorithms, dynamic programming, greediness, probabilistic algorithms. Topics include: sorting, searching, graph algorithms, compression, cryptography, computational geometry, and NP-completeness.'},
    'CS232': {'color': '#8bcb1a', 'title': 'Artifical Intelligence', 'text': 'An introduction to artificial intelligence (AI), the design of computer systems that possess and acquire knowledge and can reason with that knowledge. Topics include knowledge representation, problem solving and search, planning, vision, language comprehension and production, learning, common sense reasoning, and expert systems. To attain a realistic and concrete understanding of these problems, the Python programming language will be taught and used to implement the algorithms of the course.'},
    'CS235': {'color': '#6da30f', 'title': 'Languages and Automata', 'text': 'This course offers an introduction to the concepts of languages and automata. Topics include languages, regular expressions, finite automata, grammars, pushdown automata, and Turing machines. The first half of the semester covers the Chomsky hierarchy of languages and their associated computational models. The second half of the semester focuses on decidability issues and unsolvable problems. The course closes with a brief introduction to complexity theory.'},
    'CS240': {'color': '#a9ff14', 'title': 'Introduction to Machine Organization with Laboratory', 'text': 'This course examines how modern computer systems run programs, introducing key software and hardware abstractions between high-level programming languages and hardware circuits. The course traces themes of data representation and program translation, with a focus on how each level of abstraction (and its implementation) in a computer system impacts the execution of a high-level program. Topics include the C programming language, basic concepts of program compilation and assembly, machine code, instruction set architecture, basic microarchitecture, number representation and computer arithmetic, digital logic, the memory hierarchy, the operating system process model, virtual memory, and memory management. Students explore computer systems through projects ranging from simple hardware circuits to software memory allocators. Students are required to attend one three-hour laboratory weekly.'},
    'CS242': {'color': '#44ff14', 'title': 'Computer Networks', 'text': 'A systems-oriented approach to data networks, including a theoretical discussion of common networking problems and an examination of modern networks and protocols. Topics include point-to-point links, packet switching, internet protocols, end-to-end protocols, congestion control, and security. Projects may include client-server applications and network measurement tools.'},
    'CS249': {'color': '#14ff83', 'title': 'Scientific and Parallel Computing (Topic for 2016-17)', 'text': 'What makes a computer good or bad at running scientific computation or visualization? Does it depend on the person doing the programming? This course provides an introduction to parallel computing systems and their use in scientific applications. Topics considered include parallelism in hardware design, especially multicores and GPUs, the programming of parallel systems including programming paradigms and algorithm design, and evaluating the efficiency of parallel systems. The course will conclude with lectures on various topics in Scientific Computing such as climate science, computational astronomy, and big data.'},
    'CS251': {'color': '#14ffbb', 'title': 'Theory of Programming Languages', 'text': 'This course introduces principles underlying the design, semantics, and implementation of modern programming languages in major paradigms including function-oriented, imperative, and object-oriented. The course examines: language dimensions including syntax, naming, state, data, control, types, abstraction, modularity, and extensibility; issues in the runtime representation and implementation of programming languages; and the expression and management of parallelism and concurrency. Students explore course topics via programming exercises in several languages, including the development of programming language interpreters.'},
    'CS301': {'color': '#14fff2', 'title': 'Compiler and Runtime System Design', 'text': 'This course covers principle and practice in the design and implementation of modern compilers and programming language runtime systems. Topics include lexical analysis, parsing, symbols tables, semantic analysis, type checking, intermediate representations, program analysis and optimization, code generation, garbage collection, and other runtime support. As time permits, the course may also survey topics including just-in-time compilation, runtime optimization, concurrent runtime systems, or extended automatic program error detection. Students will construct a full compiler and runtime system for a simple statically-typed programming language over the course of the semester.'},
    'CS304': {'color': '#14caff', 'title': 'Databases with Web Interfaces', 'text': 'A study of the three-layer architecture commonly used for Web-based applications such as e-commerce sites. We will learn to model and design databases using entity-relationship diagrams and the Standard Query Language (SQL) for managing databases. We will learn PHP, CGI/Python, and Java Servlets, which are three important technologies for Web-based architectures. We will also discuss performance, reliability, and security issues. Finally, we will create dynamic websites driven by database entries.'},
    'CS307': {'color': '#14a0ff', 'title': 'Computer Graphics', 'text': 'A survey of topics in computer graphics with an emphasis on fundamental techniques. Topics include: graphics hardware, fundamentals of three-dimensional graphics including modeling, projection, coordinate transformation, synthetic camera specification, color, lighting, shading, hidden surface removal, animation, and texture-mapping. We also cover the mathematical representation and programming specification of lines, planes, curves, and surfaces.'},
    'CS310': {'color': '#1473ff', 'title': 'Foundations of Cryptology', 'text': 'When is a cryptographic system secure and how will we ever know? This course introduces the computational models and theory computer scientists use to address these issues. Topics include one-way functions, trapdoor functions, probabilistic complexity classes, pseudorandom generators, interactive proof systems, zero-knowledge proofs, and the application of these theories to modern cryptology.'},
    'CS313': {'color': '#143cff', 'title': 'Computational Biology', 'text': 'Many elegant computational problems arise naturally in the modern study of molecular biology. This course is an introduction to the design, implementation, and analysis of algorithms with applications in genomics. Topics include bioinformatic algorithms for dynamic programming, tree-building, clustering, hidden Markov models, expectation maximization, Gibbs sampling, and stochastic context-free grammars. Topics will be studied in the context of analyzing DNA sequences and other sources of biological data. Applications include sequence alignment, gene-finding, structure prediction, motif and pattern searches, and phylogenetic inference. Course projects will involve significant computer programming in Java. No biology background is expected.'},
    'CS315': {'color': '#2714ff', 'title': 'Web Search and Mining', 'text': 'In the last decade we have experienced an explosive growth of information through the Web. Locating information seems to be very easy, while determining the quality of information can be tricky. This course is for students who want to know why search engines can answer your queries fast and (most of the time) accurately, why at other times they seem to be missing the point and provide untrustworthy information, and how one can design a website that acquires high visibility. We will cover traditional information retrieval methods and Web search algorithms such as crawlers and spiders, with a focus on probabilistic and graph-theoretic methods that can detect Web spam. We will also cover some basic understanding of text mining and data clustering. Time permitting, we will examine other relevant issues of the information explosion era, such as the shape and structure of the Web, epistemology of information, and properties of large random networks.'},
    'CS320': {'color': '#5214ff', 'title': 'Tangible User Interfaces', 'text': 'Tangible user interfaces emerge as a novel human-computer interaction style that interlinks the physical and digital worlds. Extending beyond the limitations of the computer mouse, keyboard, and monitor, tangible user interfaces allow users to take advantage of their natural spatial skills while supporting collaborative work. Students will be introduced to conceptual frameworks, the latest research, and a variety of techniques for designing and building these interfaces. Developing tangible interfaces requires creativity as well as an interdisciplinary perspective. Hence, students will work in teams to design, prototype, and physically build tangible user interfaces.'},
    'CS322': {'color': '#7214ff', 'title': 'Seminar: Learning and Teaching in a Digital World (Topic for Fall 2016)', 'text': 'Digital technologies are part of our social fabric. This design-intensive seminar investigates the intersection of digital technologies, learning, and learning communities.  Technologies inform the where, the when and the how of teaching and learning, whether within a public space, classroom, or the virtual realm.  We will explore how effective and responsive educators may harness technology-rich options and introduce you to design methodologies for inclusive teaching and learning.  The course will include guest speakers and field trips.'},
    'CS332': {'color': '#a014ff', 'title': 'Visual Processing by Computer and Biological Vision Systems', 'text': 'This course explores methods for deriving information about the three-dimensional world from visual images and using this information for tasks such as recognizing objects and events, navigating through a dynamic scene, and communicating between social agents. We use an interdisciplinary approach that combines computer science, psychology, and neuroscience, facilitating the design of effective computer vision systems while contributing to an understanding of human visual processing and how it is carried out in the brain. Topics include edge detection, stereo vision, motion analysis, the analysis of color, object and face recognition, activity recognition, visual attention and search, and image processing applications in medicine, security, information retrieval, and mobile robotics. The course uses vision software written in MATLAB.'},
    'CS342': {'color': '#c014ff', 'title': 'Computer Security', 'text': 'An introduction to computer security. Topics include ethics, privacy, authentication, access control, information flow, operating system security (with a focus on Linux), cryptography, security protocols, intrusion prevention and detection, firewalls, viruses, network security, Web security, and programming language security. Assignments include hands-on exercises with security exploits and tools in a Linux environment. Participants will independently research, present, and lead discussions on security-related topics. Students are required to attend an additional 70-minute discussion section each week.'},
    'CS349': {'color': '#e514ff', 'title': 'Advanced Topics in Computer Science - Natural Language Processing (Topic for 2015-16)', 'text': 'How do Google Translate and Siri work? Natural language processing (NLP) studies how to teach computers to communicate with humans through language. We will survey the foundational ideas and formalisms of the field, and explore algorithms to solve practical problems ranging from spell-checking to authorship detection and machine translation. Along the way, we will ponder larger questions about the nature of language and whether computers could ever understand it the way that humans do. This course will also expose students to general concepts in statistical machine learning and data analysis that are widely applicable to domains beyond language processing.'}}
    

current = ['CS111', 'CS220', 'CS230', 'CS231', 'CS235', 'CS240', 'CS249', 
    'CS251', 'CS304', 'CS307', 'CS310', 'CS320', 'CS322', 'CS332']
    
majreq = ['CS111', 'CS230', 'CS231', 'CS235', 'CS240', 'CS251']

minreq = ['CS111', 'CS230']

req200 = ['CS215', 'CS220', 'CS232', 'CS242', 'CS249']

req300 = ['CS301', 'CS304','CS307', 'CS310', 'CS313', 'CS315', 
    'CS320', 'CS322', 'CS332','CS342', 'CS349']
    
minpickone = ['CS231', 'CS235', 'CS240']

for course in current:
    descdict[course].update({'current': 'This course is offered for the Fall 2016 semester.'})
    
for course in majreq:
    descdict[course].update({'majreq': 'This course is a requirement for the CS major.'})
    
for course in minreq:
    descdict[course].update({'minreq': 'This course is a requirement for the CS minor.'})
    
for course in req200:
    descdict[course].update({'req200': 'This course may be used to fulfill a 200-level requirement for the CS major or minor.'})
    
for course in req300:
    descdict[course].update({'req300': 'This course may be used to fulfill a 300-level requirement for the CS major or minor.'})
    
for course in minpickone:
    if course=='CS231':
        c1, c2 = 'CS235', 'CS240'
    elif course=='CS235':
        c1, c2 = 'CS231', 'CS240'
    elif course=='CS240':
        c1, c2 = 'CS231', 'CS235'
    descdict[course].update({'minpickone': 'This course or ' + c1 + ' or ' + c2 + ' is a requirement for the CS minor.'})